{"name":"Conditionals","tagline":"This is a small basic script helping to explain \"if\" conditionals to elementary students using the KIPR Link robot used in the Junior Botball Challenges.","body":"#Conditionals\r\nConditionals are a way to give your robot decision making abilities. We do this by \r\nevaluating an expression to be either TRUE or FALSE. \r\n\r\nIn order to \"evaluate\" an expression, we need to know what \"operators\" are. Here's the \r\nlist we'll start with (Relational Operators):\r\n\r\nOperator  |  Meaning          |   Example     | Result of Example\r\n--------- | ----------------- | ------------- | -------------\r\n==     |  Equal to         |  5 == 5  | this is true, because 5 is \"equal to\" 5\r\n!=     |  Not Equal to     |  5 != 3  | this is also true, 5 does \"not equal\" 3\r\n>      |  Greater than     |  5 > 3   | this is true, 5 is \"greater than\" 3\r\n<      |  Less than        |  5 < 3   | this is NOT true, 5 is not \"less than\" 3\r\n>=     |  Greater than or equal to  |  5 >= 5  | this is true, 5 is \"equal to\" 5\r\n<=     |  Less than or equal to    |  5 <= 6  | this is true, 5 is \"less than\" 6\r\n\r\nWe'll start with an \"if\" conditional. \"If\" is a keyword that will help us to evaluate our \r\nstatement.  For example, when you play Simon Says, in your mind, you're making the decision \r\nwhether to carry out the command based on \"if\" the caller says \"Simon Says\" before they say \r\nthe command.  We would write that like this:\r\n\r\n  \tif (caller says \"Simon Says\") \r\n  \t{\r\n      \tdo the command\r\n  \t}\r\n\r\nSo, we're \"evaluating\" the part in parentheses - we call this the \"expression\". If that is \r\ntrue, then we continue inside the curly brackets. Otherwise, we skip what's in the curly \r\nbrackets and continue on after that.\r\n\r\nThe way we write this in actual code is:\r\n\r\n    if (TRUE)\r\n    {\r\n        doThisCommand();\r\n    }\r\n    \r\nor\r\n\r\n    if ( 5 == 5 ) // which evaluates to TRUE\r\n    {\r\n        doThisCommand();\r\n    }\r\n\r\nThe program in the `main.c` file will test some expressions and move the robot either \r\nforward or backward. The robot will start behind the start line on Mat A. Read through the \r\ncode and try to predict which blocks will be executed and which will be ignored. Then, \r\ndetermine if the robot will end up back in the starting box, or somewhere past the starting \r\nline on the game board. _If you don't have the Jr. Botball game boards, you can just put the \r\nrobot down in front of a line and see if the robot ends up back on the same side of the line\r\nthat it started._\r\n\r\nAfter running the program, take a look at the console on the robot. You'll see which blocks \r\nwere actually executed by reading the output on the console.\r\n\r\n\r\n*Note:*\r\n\r\nThe code used in these tutorials is intended to run on the KIPR Link controller and written in \r\nthe KISS Platform. You can find information about the KIPR Link and KISS Platform at \r\nhttp://www.kipr.org/hardware-software. The KISS Platform includes a simulator, so you can run \r\nthe code on your computer without a robot. Our Botball team currently participates in the Junior \r\nBotball Challenge sponsored by KIPR. You can view more information for the challenge at \r\nhttp://www.juniorbotballchallenge.org.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}